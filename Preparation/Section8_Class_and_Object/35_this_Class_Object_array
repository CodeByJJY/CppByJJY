// Stock.h
#ifndef STOCK
#define STOCK
#include <iostream>

using namespace std;

class Stock
{
private:
	string name;
	int shares;
	float share_val;
	double total_val;
	void set_total() { total_val = shares * share_val; }

public:
	Stock();
	Stock(string, int, float);
	void buy(int, float);
	void sell(int, float);
	void update(float);
	Stock& topval(Stock&);		// 참조를 리턴
	void show();
	~Stock();
};
#endif // !STOCK

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// func.cpp
#include "Stock.h"

void Stock::buy(int n, float pr) {
	shares += n;
	share_val = pr;
	set_total();
}
void Stock::sell(int n, float pr) {
	shares -= n;
	share_val = pr;
	set_total();
}
void Stock::update(float pr) {
	share_val = pr;
	set_total();
}
void Stock::show() {
	cout << "회사 명 : " << name << endl;
	cout << "주식 수 : " << shares << endl;
	cout << "주가 : " << share_val << endl;
	cout << "주식 총 가치 : " << total_val << endl;
}
// 참조를 리턴
Stock& Stock::topval(Stock& s) {
	if (s.share_val > share_val)
		return s;
	else return *this;					// this : 자기 자신을 반환하는 클래스 포인터
}



Stock::Stock(string co, int n, float pr)
{
	name = co;
	shares = n;
	share_val = pr;
	set_total();
	cout << name << "클래스가 생성되었습니다.\n";
}

Stock::Stock() {
	name = "";
	shares = 0;
	share_val = 0;
	set_total();
}

Stock::~Stock()
{
	cout << name << "클래스가 소멸되었습니다.\n";
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// main.cpp
#include <iostream>
#include "Stock.h"

int main() {

	Stock s[4] = {
		Stock("A", 10, 1000),
		Stock("B", 20, 1200),
		Stock("C", 20, 1300),
		Stock("D", 20, 1400)
	};

	Stock* first = &s[0];			// 포인터 : 주소값
	for (int i = 1; i < 4; i++)
		first = &first->topval(s[i]);		// 주소에 대해서는, 간접참조 연산자를 대입한다.

	first->show();

	return 0;
}
