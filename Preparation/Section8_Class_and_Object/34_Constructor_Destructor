// Stock.h
#ifndef STOCK
#define STOCK				// 매크로 이름은 무조건 영어 대문자로 할 것!
#include <iostream>

using namespace std;

class Stock
{
	// private
	/*
	* 비공개 멤버
	* 클래스 내에서만 접근 가능
	* 직접적인 Data는 private로 선언하여 데이터를 은닉하자.
	*/
private:									// private : 직접적으로 접근해서 값을 변경할 수 없다. -> 데이터 은닉
	string name;
	int shares;
	float share_val;
	double total_val;
	void set_total() { total_val = shares * share_val; }
	// public
	/*
	* 공개 멤버, 클래스
	* 외부에서도 접근 가능
	*/
public:									// public 에 정의된 함수들을 통해 public의 변수들을 변경할 수 있다.
	//void acquire(string, int, float);
	void buy(int, float);
	void sell(int, float);
	void update(float);
	void show();
	Stock(string, int, float);
	Stock();
	~Stock();
};
#endif

/////////////////////////////////////////////////////////////////////
// func.cpp
#include <iostream>
#include "Stock.h"

//// acquire : 주식 선언
//void Stock::acquire(string co, int n, float pr) {
//	name = co;			// 주식 이름
//	shares = n;			// 주식 개수
//	share_val = pr;		// 주가
//	set_total();
//}

// buy : 주식 매수
void Stock::buy(int n, float pr) {
	shares += n;
	share_val = pr;
	set_total();
}

// sell : 주식 매도
void Stock::sell(int n, float pr) {
	shares -= n;
	share_val = pr;
	set_total();
}

// update : 주가 업데이트
void Stock::update(float pr) {
	share_val = pr;
	set_total();
}

// show : 주식의 내용 출력
void Stock::show() {
	cout << "회사 명 : " << name << endl;
	cout << "주식 수 : " << shares << endl;
	cout << "주가 : " << share_val << endl;
	cout << "주식 총 가치 : " << total_val << endl;
}

// 사용 범위 결정 연산자 ::
// 생성자
/*
클래스를 마치 변수 사용하듯이, main 함수에서 소환할 때 값을 다이렉트로 입력할 수 있도록 한다.
생성자는 C++에서 암시적으로 디폴트로 지원해준다.
*/
/*
* 리턴값을 가질 수 없다.
*/
Stock::Stock(string co, int n, float pr)
{
	name = co;
	shares = n;
	share_val = pr;
	set_total();
}

Stock::Stock() {
	name = "";
	shares = 0;
	share_val = 0;
	set_total();
}

// 소멸자
/*
* 리턴값을 가질 수 없다.
* 선언된 데이터형을 가질 수 없다.
* 매개변수를 가질 수 없다.
*/
Stock::~Stock()
{
	cout << name << "클래스가 소멸되었습니다.\n";
}

/////////////////////////////////////////////////////////////////////
// main.cpp
#include <iostream>
#include "Stock.h"

int main() {
	// 추상화와 클래스
	// 클래스란?
	// 추상화를 사용자 정의 데이터형으로 변환해주는 수단
	// 추상화란?
	/*
	어떠한 객체를 사실적으로 표현하는 것이 아니라, 
	공통된 특징을 간결한 방식으로, 이해하기 쉽게 표현하는 것.
	*/
	/*
	1. 클래스 선언
	2. 클래스 매서드 정의
	*/
	//Stock temp = Stock("Panda", 100, 1000);
	//Stock temp2("Panda", 100, 1000);
	////temp.acquire("Panda", 100, 1000);
	//temp.show();
	//temp.buy(10, 1200);
	//temp.show();
	//temp.sell(5, 800);
	//temp.show();

	cout << "생성자를 이용해 객체 생성\n";
	Stock temp("Panda", 100, 1000);
	cout << endl;

	cout << "디폴트 생성자를 이용하여 객체 생성\n";
	Stock temp2;
	cout << endl;

	cout << "temp와 temp2 출력\n";
	temp.show();
	temp2.show();
	cout << endl;

	cout << "생성자를 이용하여 temp 내용 재설정\n";
	temp = Stock("Coding", 200, 1000);				// "Coding 클래스가 소멸되었습니다." -> 소멸되는 시점에서, 이미 이름이 "Panda"가 아닌 "Coding"이기 때문!
	cout << endl;

	cout << "재설정된 temp 출력\n";
	temp.show();
	cout << endl;

	// 소멸자 실행 순서 : 생성자가 실행된 역순으로 소멸

	return 0;
}
