#include <iostream>

using namespace std;

int main() {
	/*
	* C++ 특징 : 객체지향 프로그래밍
	즉, 컴파일 시간이 아닌, 실행 시간에 어떠한 결정을 내릴 수 있다.
	예 : 배열 크기
	- 재래식 절차적 프로그래밍 : 배열의 크기가 미리 결정됨.
	- 객체지향 프로그래밍 : 배열의 크기를 실행 시간 동안 결정.
	*/

	/*
	* 위의 내용이 위대한 이유
	- 만약 일주일에 한번만 200사이즈를 다루고, 나머지 기간동안에는 20 사이즈만 다루는 케이스가 있다고 치자.
	- 그러면 동적 할당을 통해, 일주일에 한번만 200 사이즈 메모리를 할당하고, 나머지 기간 동안에는 20 사이즈 메모리로 운용이 가능하다.
	*/

	int val = 3;
	cout << &val << endl;

	/*
	* Pointer : 사용할 주소에 이름을 붙인다.
	* 즉, 포인터는 포인터의 이름이 주소를 나타낸다.
	* 선언 : 간접값 연산자, 간접 참조 연산자 '*'
	*/

	/*
	* Pointer에는 어떠한 정수를 대입하는 것이 의미가 없다.
	* 대신 어떤 값이 저장된 다른 변수의 메모리 주소를 입력받아서, 데이터에 접근할 수 있다.
	*/
	int a = 6;		// 수
	int* b;			// 위치

	b = &a;

	cout << "a의 값 " << a << endl;
	cout << "*b의 값 " << *b << endl;			// pointer에 저장된  value를 확인할 때 ; 간접 참조 연산자 '*'를 앞에 붙인다.

	cout << "a의 주소 " << &a << endl;
	cout << "*b의 주소 " << b << endl;

	*b = *b + 1;

	cout << "이제 a의 값은 " << a << endl;

	return 0;
}
